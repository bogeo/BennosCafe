-- ----------------------------------------------------------------------------
-- Test reductions for POI-Recommender module
-- Encoding for CafeOBJ version 1.5.8
-- Geovisualization Lab, Bochum University of Applied Sciences

open POI-Recommender .

  -- Create some object instances for the test scenario:
  ops l1 l2 : -> L .
  ops u1 u2 : -> U .

  --> Test reductions for recommendable POIs R(u):
  eq l1 in S(u1) = true .
  eq l1 in S(u2) = false .
  reduce l1 in R(u1) .                --> false
  reduce l1 in R(u2) .                --> true
  reduce l2 in R(u1) .                --> not determinable
  reduce l2 in R(u2) .                --> not determinable
  
  --> Some basic constraints that should hold:
  eq #(L! - S(u1)) = 11 . 
  eq #(L! - S(u2)) = 9 . 
  reduce #[R 10 (u1)] .               --> Result: 10
  reduce #[R 10 (u2)] .               --> Result: 9 
  
  --> Top-n-recommendation: 
  eq l1 in S(u1) = true .
  eq l1 in S(u2) = false .
  reduce l1 in R(u1) .                --> false
  reduce l1 in R(u2) .                --> true
  reduce l2 in R(u1) .                --> not determinable
  reduce l2 in R(u2) .                --> not determinable
  -- Set-up test scenario...
  eq rho+(l1, u1) < rho+(l2, u1) = true .
  eq l2 in R 10 (u1) = false .  
  eq l2 in S(u1) = false .  
  -- ... and check, if l2 violates top-n recommendation criterion:
  reduce 
    check l2 
    against l1 u1 S(u1) 
    in R 10 (u1) .                    --> false

  --> ~ relation
  ops r1 r2 r3 : -> LSet .
  eq r1 ~ r2 = true .
  eq r2 ~ r3 = true .
  reduce r1 ~ r1 .                    --> true
  reduce r3 ~ r2 .                    --> true
  reduce r1 ~ r3 .                    --> not determinable
  reduce r1 ~ r1 via r2 .             --> true (using workaround)

close .
