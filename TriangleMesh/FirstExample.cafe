-- ------------------------------------------------------------------------
-- Algebraic Specification of Triangular Structures for Geospatial 
-- Applications
-- Module definition for CafeOBJ 1.5.8
-- Author: Benno Schmidt, Geovisualization Lab, Bochum University 
-- of Applied Sciences

-- ADT 'SimpleTriMesh'
-- Basically, a simple triangle mesh consists of a set of georeferenced 
-- vertices and a set of triangles that are connected by their common 
-- edges and corners, which are defined with help of the given vertices.
-- To hold the vertex positions (x, y, z), the datatype Point is intro-
-- duced. A triangle will be given by a sequence of three Vtx objects. 
-- To keep the example simple, the order of the given vertices will not
-- be considered here.

module Helpers {
  protecting (FLOAT)  
  [ Bool Float Point Vtx Tri ]

  signature {
    op (_ _ _) : Float Float Float -> Point  -- Point constructor
      -- We assume that all Points inside a mesh will refer to the same 
      -- coordinate reference system.
    op [_ _ _] : Vtx Vtx Vtx -> Tri
    pred ?valid : Tri 
    pred _~_ : Tri Tri  
    -- The relation ~ between two triangles is true, iff the triangles 
    -- share all their vertices.
  }
  
  axioms {
    vars u v w u' v' w' : Vtx
    eq ?valid([u v w]) = u =/= v and u =/= w and v =/= w .
      -- ?valid will be checked later when adding triangles to meshes or set
      -- containers.
    eq [u v w] ~ [u' v' w'] = 
      (u == u' and v == v' and w == w') or 
      (u == u' and v == w' and w == v') or
      (u == v' and v == u' and w == w') or
      (u == v' and v == w' and w == v') or
      (u == w' and v == v' and w == u') or
      (u == w' and v == u' and w == v') .
  }
}

module FirstExample {
  protecting (FLOAT)  
  protecting (Helpers)  
  [ Bool Float Point Vtx Tri SimpleTriMesh ]

  signature {
    op emptyTriMesh : -> SimpleTriMesh
    op _addTri_ : SimpleTriMesh Tri -> SimpleTriMesh
    op _$add_ : SimpleTriMesh Tri -> SimpleTriMesh 
    pred ?empty : SimpleTriMesh
    pred _?in_ : Vtx SimpleTriMesh
    pred _?in_ : Tri SimpleTriMesh
    op _place_at_ : SimpleTriMesh Vtx Point -> SimpleTriMesh
    pred ?placed : Vtx SimpleTriMesh
  }
  
  axioms {
    var m : SimpleTriMesh
    vars t t' : Tri
    vars u v w x : Vtx
    var p : Point 

    eq m addTri t = if t ?in m or not ?valid(t) then m else m $add t fi .
    eq ?empty(emptyTriMesh) = true .
    eq ?empty(m $add t) = false .
    eq x ?in emptyTriMesh = false .
    eq x ?in (m $add [u v w]) = (x == u or x == v or x == w) or x ?in m .
    eq t' ?in emptyTriMesh = false .
    eq t' ?in (m $add t) = t' ~ t or t' ?in m .
    eq ?placed(x, emptyTriMesh) = false .
    eq ?placed(x, m place u at p) = x == u or ?placed(x, m) .
    eq ?placed(x, m $add t) = ?placed(x, m) .
  }
}

-- ------------------------------------------------------------------------
-- Instance example:

open FirstExample .
vars 0 1 2 3 4 5 : Vtx
let m1 = emptyTriMesh 
  addTri [0 1 2] 
  addTri [0 2 3]
  addTri [1 2 3]
  addTri [0 3 4]
  addTri [1 3 5] .
red 0 ?in m1 . 
red 6:Vtx ?in m1 . 
red [0 1 2] ?in m1 . 
-- red [0 2 1] ?in m1 . 
let m1geo = m1 
  place 0 at (420000. 5870000. 40.) 
  place 1 at (420100. 5870000. 40.3) 
  place 2 at (420050. 5870020. 40.4) 
  place 3 at (420050. 5870050. 40.2) 
  place 4 at (420000. 5870050. 39.8) 
  place 5 at (420100. 5870050. 40.2) . 
red ?placed(3, m1) .
red ?placed(3, m1geo) .
close .

-- Important extensions: Check, if mesh valid (all vertices have been
-- placed); consider that triangles may not overlap;  etc.

eof
